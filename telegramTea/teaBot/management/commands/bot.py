from django.core.management.base import BaseCommand
import telebot
from telebot import types
from telebot import apihelper
from django.db.models import F
import re
from django.core import exceptions
import json
from teaBot.models import CategoryOne, AllMenu, Users, Basket, Orders
from telegramTea.settings import BOT, PAYMENTS_PROVIDER_TOKEN, ID_HELP_CHANNEL, ID_ORDER_CHANNEL
from teaBot.keyboardBot import type_of_payment, canceling_a_request, start_menu, keyboard_user_number, name_user, keyboard_category_one, keyboard_count, type_delivery, keyboard_count_tea,keyboard_catalog


class Command(BaseCommand):
    help = "–¢–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç"

    def handle(self, *args, **options):
        bot = telebot.TeleBot(BOT)
        apihelper.proxy = {'https': 'socks5h://PrhZ8F:eebLU48kCY@188.130.129.144:5501'}
        basket_count = {}

        def help_user(chat_id):
            keyboard = types.ReplyKeyboardMarkup(True, False)
            keyboard.row('‚úâÔ∏è–í–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É')
            keyboard.row('üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏')
            keyboard.row('üîô –ù–∞–∑–∞–¥')
            bot.send_message(chat_id, '*–¢–µ–ª–µ—Ñ–æ–Ω*:\n‚òéÔ∏è–ú–æ–±–∏–ª—å–Ω—ã–π: +99898 125 31 03\n'
                                      '‚òéÔ∏è–ú–æ–±–∏–ª—å–Ω—ã–π: +99898 126 31 03\n\n*–ù–∞—à–∞ –ø–æ—á—Ç–∞*: info@mehrigiyo.uz\nüìç'
                                      '*–ù–∞—à –∞–¥—Ä–µ—Å*: –†–µ—Å–ø—É–±–ª–∏–∫–∞ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω, –§–µ—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å –£—á–∫—É–ø—Ä–∏–∫—Å–∫–∏–π'
                                      ' —Ä–∞–π–æ–Ω, —É–ª. –£—Ä–æ–∑–∏–º–µ—Ä–≥–∞–Ω, 94\n\n*–ú—ã –æ—Ç–∫—Ä—ã—Ç—ã*: 8.00 - 18.00',
                             parse_mode='markdown', reply_markup=keyboard)

        def order_registration(chat_id, user):
            if user.basket_set.count() == 0:
                bot.send_message(chat_id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
            else:
                user.basket_set.filter(count=0).delete()
                if user.basket_set.count() == 0:
                    bot.send_message(chat_id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞')
                else:
                    user.status = '5'
                    user.save(update_fields=["status"])
                    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:', reply_markup=name_user(user.nickname))

        def user_basket(user, user_id):
            user.basket_set.filter(count=0).delete()
            count = user.basket_set.count()
            keyboard = types.ReplyKeyboardMarkup(True, False)
            if count > 0:
                keyboard.row('üóëÔ∏è–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É')
                basket_user = user.basket_set.in_bulk()
                text = '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n'
                all_sum = 0
                for i in basket_user:
                    if basket_user[i].count == 0:
                        continue
                    else:
                        keyboard.row(f'‚úèÔ∏è {basket_user[i].name_product} ({basket_user[i].count} —à—Ç.)')
                        sum_position = basket_user[i].count * basket_user[i].price
                        text += f'*{basket_user[i].name_product}*\n{basket_user[i].count} x {basket_user[i].price} = ' \
                                f'{sum_position} ‚ÇΩ\n'
                        all_sum += sum_position

                text += f'\n–ò—Ç–æ–≥–æ: {all_sum} ‚ÇΩ'
                keyboard.row('üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'üöñ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
                if all_sum == 0:
                    bot.send_message(user_id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', reply_markup=start_menu())
                else:
                    bot.send_message(user_id, text, parse_mode='markdown', reply_markup=keyboard)
            else:
                keyboard.row('üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
                bot.send_message(user_id, '–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –ø—É—Å—Ç–æ', reply_markup=keyboard)

        @bot.message_handler(commands=['start'])
        def start_bot(message):
            user, _ = Users.objects.get_or_create(name=message.chat.id,
                                                  defaults={'nickname': message.from_user.first_name})
            user.status = '1'
            user.save(update_fields=['status'])
            bot.send_message(message.chat.id, '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º–º - –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ "Mehrigiyo"',
                             reply_markup=start_menu())

        @bot.message_handler(func=lambda message: Users.objects.get(name=message.chat.id).status == '2')
        def category_tea(message):
            user = Users.objects.get(name=message.chat.id)
            if message.text == 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                start_bot(message)
            elif message.text == "üöñ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
                order_registration(message.chat.id, user)
            elif message.text == "üì• –ö–æ—Ä–∑–∏–Ω–∞":
                user.status = '1'
                user.save(update_fields=["status"])
                user_basket(user, message.chat.id)
            elif CategoryOne.objects.filter(name=message.text).exists():
                user.status = '3'
                user.save(update_fields=["status"])
                category = CategoryOne.objects.get(name=message.text)
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª',
                                 reply_markup=keyboard_category_one(category))
            else:
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ')

        @bot.message_handler(func=lambda message: Users.objects.get(name=message.chat.id).status == '3')
        def tea(message):
            user = Users.objects.get(name=message.chat.id)
            user.basket_set.filter(count=0).delete()
            if message.text == 'üöñ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
                order_registration(message.chat.id, user)
            elif message.text == "üì• –ö–æ—Ä–∑–∏–Ω–∞":
                user.status = '1'
                user.save(update_fields=["status"])
                user_basket(user, message.chat.id)
            elif message.text == 'üîô –ù–∞–∑–∞–¥':
                user.status = '2'
                user.save(update_fields=["status"])
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª', reply_markup=keyboard_catalog())
            elif AllMenu.objects.filter(name=message.text).exists():
                user.status = '4'
                user.save(update_fields=["status"])
                object_tea = AllMenu.objects.get(name=message.text)
                basket_count[f'{message.chat.id}'] = message.text
                if object_tea.weight == 0:
                    bot.send_photo(message.chat.id, object_tea.photo,
                                   f'{object_tea.name}\n–û–±—ä–µ–º: {object_tea.volume} —à—Ç.\n–¶–µ–Ω–∞: {object_tea.price} ‚ÇΩ',
                                   reply_markup=keyboard_count())
                else:
                    bot.send_photo(message.chat.id, object_tea.photo,
                                   f'{object_tea.name}\n–û–±—ä–µ–º: {object_tea.weight} –≥.\n–¶–µ–Ω–∞: {object_tea.price} ‚ÇΩ',
                                   reply_markup=keyboard_count())
            else:
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞–∑–¥–µ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ')

        @bot.message_handler(func=lambda message: Users.objects.get(name=message.chat.id).status == '4')
        def count_product(message):
            user = Users.objects.get(name=message.chat.id)
            if message.text.isdigit():
                try:
                    if user.basket_set.filter(name_product=basket_count[f'{message.chat.id}']).exists():
                        object_tea = user.basket_set.get(name_product=basket_count[f'{message.chat.id}'])
                        if object_tea.count + int(message.text) > 10000:
                            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ'
                                                              ' –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 10000 —à—Ç.')
                        else:
                            object_tea.count += int(message.text)
                            user.status = '2'
                            user.save(update_fields=["status"])
                            object_tea.save(update_fields=["count"])
                            del basket_count[f'{message.chat.id}']
                            bot.send_message(message.chat.id, '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü—Ä–æ–¥–æ–ª–∂–∏–º?',
                                             reply_markup=keyboard_catalog())
                    else:
                        if int(message.text) > 10000:
                            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ'
                                                              ' –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 10000 —à—Ç.')
                        else:
                            user.status = '2'
                            user.save(update_fields=["status"])
                            arr = AllMenu.objects.get(name=basket_count[f'{message.chat.id}'])
                            Basket.objects.create(name_product=basket_count[f'{message.chat.id}'],
                                                  price=arr.price, baskUser=user, count=int(message.text))
                            del basket_count[f'{message.chat.id}']
                            bot.send_message(message.chat.id, '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É. –ü—Ä–æ–¥–æ–ª–∂–∏–º?',
                                             reply_markup=keyboard_catalog())
                except KeyError:
                    user.status = '1'
                    user.save(update_fields=["status"])
                    keyboard = types.ReplyKeyboardMarkup(True, False)
                    keyboard.row('–ù–∞—á–∞—Ç—å —Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é')
                    bot.send_message(message.chat.id, '–í—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è, –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å /start',
                                     reply_markup=keyboard)
            elif message.text == 'üì• –ö–æ—Ä–∑–∏–Ω–∞':
                user.status = '1'
                user.save(update_fields=["status"])
                user_basket(user, message.chat.id)
            elif message.text == 'üîô –ù–∞–∑–∞–¥':
                user.status = '3'
                user.save(update_fields=["status"])
                category = AllMenu.objects.get(name=basket_count[f'{message.chat.id}']).category_one
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª',
                                 reply_markup=keyboard_category_one(category))
            else:
                bot.delete_message(message.chat.id, message.message_id)
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')

        @bot.message_handler(func=lambda message: Users.objects.get(name=message.chat.id).status == '5')
        def order_registration_name(message):
            user = Users.objects.get(name=message.chat.id)
            if message.text == '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É':
                Users.objects.filter(name=message.chat.id).update(status='1')
                bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=start_menu())
            elif (message.text.isalpha() and len(message.text) < 30) or message.text == user.nickname:
                user.nickname = message.text
                user.status = '6'
                user.save(update_fields=['nickname', 'status'])

                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏.\n–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ 300—Ä.'
                                                  '\n–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 2000 ‚ÇΩ.',
                                 reply_markup=type_delivery())
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º—è', reply_markup=name_user(user.nickname))

        @bot.message_handler(func=lambda message: Users.objects.get(name=message.chat.id).status == '6')
        def order_registration_delivery(message):
            if message.text == '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É':
                Users.objects.filter(name=message.chat.id).update(status='1')
                bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=start_menu())
            elif message.text == 'üöó –ü—Ä–∏–≤–µ–∑—Ç–∏':
                Users.objects.filter(name=message.chat.id).update(delivery=message.text, status='7')
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n–£–ª–∏—Ü–∞, –Ω–æ–º–µ—Ä –¥–æ–º–∞, –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã',
                                 reply_markup=canceling_a_request())
            elif message.text == 'üèÉ –ó–∞–±–µ—Ä—É —Å–∞–º':
                Users.objects.filter(name=message.chat.id).update(delivery=message.text, status='8')
                bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–µ–≥–æ –Ω–æ–º–µ—Ä–∞',
                                 reply_markup=keyboard_user_number())
            else:
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞')

        @bot.message_handler(func=lambda message: Users.objects.get(name=message.chat.id).status == '7')
        def order_registration_location(message):
            if message.text == '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É':
                Users.objects.filter(name=message.chat.id).update(status='1')
                bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=start_menu())
            elif len(message.text) < 50:
                Users.objects.filter(name=message.chat.id).update(address=message.text, status='8')
                bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–µ–≥–æ –Ω–æ–º–µ—Ä–∞',
                                 reply_markup=keyboard_user_number())
            else:
                bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–æ –∞–¥—Ä–µ—Å')

        @bot.message_handler(content_types="contact")
        def order_registration_number(message):
            if Users.objects.get(name=message.chat.id).status == '8':
                if message.contact is not None:
                    Users.objects.filter(name=message.chat.id).update(mobile=message.contact.phone_number, status='p')
                    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã', reply_markup=type_of_payment())
                else:
                    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ')

        @bot.message_handler(func=lambda message: Users.objects.get(name=message.chat.id).status == 'p')
        def pay(message):
            if message.text == '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É':
                start_bot(message)
            elif message.text == 'üí≥–û–ø–ª–∞—Ç–∞ –æ–Ω–ª–∞–π–Ω':
                user = Users.objects.get(name=message.chat.id)
                user.status = '1'
                user.save(update_fields=['status'])
                price = []
                count = 1
                all_sum = 0
                with open('order_number.json', 'r') as f:
                    number = json.load(f)['number']
                number_order = json.dumps({"number": number + 1})
                with open('order_number.json', 'w') as f:
                    f.write(number_order)
                text = f'*–ó–∞–∫–∞–∑ ‚Ññ {number}*\n'
                text_admin = f'‚ùóÔ∏è *–í–∞–º –ø—Ä–∏—à–µ–ª –∑–∞–∫–∞–∑ ‚Ññ {number}*\n\n'
                if user.delivery == 'üèÉ –ó–∞–±–µ—Ä—É —Å–∞–º':
                    text_admin += f'üë§–î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n{user.nickname}, ' \
                           f'{user.mobile}\nüì¶–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:\n{user.delivery}\n\n-----\nüõí–¢–æ–≤–∞—Ä—ã:\n'
                else:
                    text_admin += f'üë§–î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n{user.nickname}, ' \
                           f'{user.mobile}\nüì¶–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:\n{user.delivery}\n' \
                           f'–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:{user.address}\n\n-----\nüõí–¢–æ–≤–∞—Ä—ã:\n'
                for i in user.basket_set.all():
                    position_sum = i.count * i.price
                    all_sum += position_sum
                    price.append(types.LabeledPrice(label=f'–ø–æ–∑–∏—Ü–∏—è {count}: {i.count}—à—Ç. x {i.price}‚ÇΩ',
                                                    amount=int(position_sum * 100)))
                    text += f'*–ø–æ–∑–∏—Ü–∏—è {count}* - {i.name_product}\n{i.count} x {i.price} = {position_sum} ‚ÇΩ\n'
                    text_admin += f'*–ø–æ–∑–∏—Ü–∏—è {count}* - {i.name_product}\n{i.count} x {i.price} = {position_sum} ‚ÇΩ\n'
                    count += 1
                if user.delivery == 'üöó –ü—Ä–∏–≤–µ–∑—Ç–∏':
                    if all_sum < 2000:
                        price.append(types.LabeledPrice(label=f'–î–æ—Å—Ç–∞–≤–∫–∞ 300 ‚ÇΩ',
                                                        amount=30000))
                        text += '\n+ _–î–æ—Å—Ç–∞–≤–∫–∞ 300 ‚ÇΩ_'
                        text_admin += f'\n-----\n*–î–æ—Å—Ç–∞–≤–∫–∞:* 200 ‚ÇΩ\n‚úÖ*–û–ü–õ–ê–ß–ï–ù–û* {all_sum + 300} ‚ÇΩ'
                    else:
                        text_admin += f'\n-----\n‚úÖ*–û–ü–õ–ê–ß–ï–ù–û* {all_sum} ‚ÇΩ'
                else:
                    text_admin += f'\n-----\n‚úÖ*–û–ü–õ–ê–ß–ï–ù–û* {all_sum} ‚ÇΩ'
                Orders.objects.create(number_order=number, user_order=text_admin)
                user.basket_set.all().delete()
                bot.send_message(message.chat.id, text, parse_mode='markdown', reply_markup=start_menu())
                bot.send_invoice(chat_id=message.chat.id,
                                 title=f'–ó–∞–∫–∞–∑ ‚Ññ {number}',
                                 description=f'–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ {number}',
                                 provider_token=PAYMENTS_PROVIDER_TOKEN,
                                 currency='RUB', is_flexible=False,
                                 prices=price, start_parameter='time-machine-example',
                                 invoice_payload='{0}'.format(number))
            elif message.text == 'üíµ–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏':
                user = Users.objects.get(name=message.chat.id)
                user.status = 'q'
                user.save(update_fields=['status'])
                with open('order_number.json', 'r') as f:
                    number = json.load(f)['number']
                text = f'*–ó–∞–∫–∞–∑ ‚Ññ {number}*\n\n'
                keyboard = types.ReplyKeyboardMarkup(True, False)
                keyboard.row('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å')
                keyboard.row('‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É')
                all_sum = 0
                for i in user.basket_set.all():
                    position_sum = i.count * i.price
                    text += f'*{i.name_product}*\n{i.count} x {i.price} = {position_sum} ‚ÇΩ\n'
                    all_sum += position_sum
                if user.delivery == 'üöó –ü—Ä–∏–≤–µ–∑—Ç–∏':
                    if all_sum < 2000:
                        text += '+_–î–æ—Å—Ç–∞–≤–∫–∞: 300 ‚ÇΩ_'
                        all_sum += 300
                text += f'\n\n*–ò—Ç–æ–≥–æ:* {all_sum} ‚ÇΩ'
                bot.send_message(message.chat.id, text, parse_mode='markdown', reply_markup=keyboard)
            else:
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã')

        @bot.message_handler(func=lambda message: Users.objects.get(name=message.chat.id).status == 'q')
        def confirm(message):
            if message.text == '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É':
                start_bot(message)
            elif message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å':
                user = Users.objects.get(name=message.chat.id)
                user.status = '1'
                user.save(update_fields=['status'])
                with open('order_number.json', 'r') as f:
                    number = json.load(f)['number']
                number_order = json.dumps({"number": number + 1})
                with open('order_number.json', 'w') as f:
                    f.write(number_order)
                if user.delivery == 'üèÉ –ó–∞–±–µ—Ä—É —Å–∞–º':
                    text = f'‚ùóÔ∏è *–í–∞–º –ø—Ä–∏—à–µ–ª –∑–∞–∫–∞–∑ ‚Ññ {number}*\n\nüë§–î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n{user.nickname}, ' \
                           f'{user.mobile}\nüì¶–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:\n{user.delivery}\n\n-----\nüõí–¢–æ–≤–∞—Ä—ã:\n'
                else:
                    text = f'‚ùóÔ∏è *–í–∞–º –ø—Ä–∏—à–µ–ª –∑–∞–∫–∞–∑ ‚Ññ {number}*\n\nüë§–î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n{user.nickname}, ' \
                           f'{user.mobile}\nüì¶–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:\n{user.delivery}\n' \
                           f'–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:{user.address}\n\n-----\nüõí–¢–æ–≤–∞—Ä—ã:\n'
                all_sum = 0
                for i in user.basket_set.all():
                    position_sum = i.count * i.price
                    text += f'*{i.name_product}*\n{i.count} x {i.price} = {position_sum} ‚ÇΩ\n'
                    all_sum += position_sum
                if user.delivery == 'üöó –ü—Ä–∏–≤–µ–∑—Ç–∏':
                    if all_sum < 2000:
                        text += '\n+ _–î–æ—Å—Ç–∞–≤–∫–∞: 300 ‚ÇΩ_'
                        all_sum += 300
                text += f'\n-----\nüí∞*–ò—Ç–æ–≥–æ:* {all_sum} ‚ÇΩ\n ‚ùå*–ù–ï –û–ü–õ–ê–ß–ï–ù–û*'
                user.basket_set.all().delete()
                bot.send_message(ID_ORDER_CHANNEL, text=text, parse_mode='markdown')
                bot.send_message(message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω", reply_markup=start_menu())
            else:
                bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ')

        @bot.pre_checkout_query_handler(func=lambda query: True)
        def process_pre_checkout_query(pre_checkout_query):
            bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

        @bot.message_handler(content_types=['successful_payment'])
        def process_successful_payment(message: types.Message):
            user_id = Orders.objects.get(number_order=int(message.successful_payment.invoice_payload))
            Orders.objects.filter(number_order=int(message.successful_payment.invoice_payload)).delete()
            user = Users.objects.get(name=message.chat.id)
            bot.send_message(ID_ORDER_CHANNEL, user_id.user_order, parse_mode='markdown')
            bot.send_message(message.chat.id, "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω")

        @bot.message_handler(func=lambda message: Users.objects.get(name=message.chat.id).status == 's')
        def user_problem(message):
            if message.text == '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É':
                start_bot(message)
            else:
                bot.forward_message(ID_HELP_CHANNEL, message.chat.id, message.message_id)
                Users.objects.filter(name=message.chat.id).update(status='1')
                bot.send_message(message.chat.id, '–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', reply_markup=start_menu())

        @bot.message_handler(func=lambda message: Users.objects.get(name=message.chat.id).status == 'h')
        def info(message):
            if message.text == 'üîô –ù–∞–∑–∞–¥':
                Users.objects.filter(name=message.chat.id).update(status='1')
                help_user(message.chat.id)
            else:
                bot.delete_message(message.chat.id, message_id=message.message_id)

        @bot.message_handler(content_types=['text'])
        def bases(message):
            if message.text == 'üìã –ö–∞—Ç–∞–ª–æ–≥':
                user = Users.objects.get(name=message.chat.id)
                user.status = '2'
                user.save(update_fields=["status"])
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª', reply_markup=keyboard_catalog())
            elif message.text == "–ù–∞—á–∞—Ç—å —Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é":
                start_bot(message)
            elif message.text == 'üì• –ö–æ—Ä–∑–∏–Ω–∞':
                user = Users.objects.get(name=message.chat.id)
                user_basket(user, message.chat.id)
            elif message.text == 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
                start_bot(message)
            elif message.text[:2] == '‚úèÔ∏è':
                object_tea = re.sub(r'\s*[(]\d*\s*—à—Ç.[)]\s*', '', message.text[3:])
                user = Users.objects.get(name=message.chat.id)
                id_tea = user.basket_set.get(name_product=object_tea).id
                bot.send_message(message.chat.id, f'{message.text[3:]}', reply_markup=keyboard_count_tea(id_tea))
            elif message.text == 'üóëÔ∏è–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É':
                user = Users.objects.get(name=message.chat.id)
                user.basket_set.all().delete()
                bot.send_message(message.chat.id, '–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', reply_markup=start_menu())
            elif message.text == 'üì≥ –ö–æ–Ω—Ç–∞–∫—Ç—ã':
                help_user(message.chat.id)
            elif message.text == 'üè¢ –û –∫–æ–º–ø–∞–Ω–∏–∏':
                Users.objects.filter(name=message.chat.id).update(status='h')
                keyboard = types.InlineKeyboardMarkup()
                keyboard_two = types.ReplyKeyboardMarkup(True, False)
                keyboard_two.row('üîô –ù–∞–∑–∞–¥')
                with open('photo_id.json', 'r') as f:
                    number_photo = json.load(f)
                but_1 = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='d|23')
                but_2 = types.InlineKeyboardButton('1/23', callback_data='empty')
                but_3 = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='f|2')
                keyboard.add(but_1, but_2, but_3)
                bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ ', reply_markup=keyboard_two)
                bot.send_photo(message.chat.id, number_photo['1'], reply_markup=keyboard)
            elif message.text == 'üöñ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
                user = Users.objects.get(name=message.chat.id)
                order_registration(message.chat.id, user)
            elif message.text == '‚úâÔ∏è–í–æ–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É':
                Users.objects.filter(name=message.chat.id).update(status='s')
                bot.send_message(message.chat.id, '–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç',
                                 reply_markup=canceling_a_request())
            elif message.text == 'üîô –ù–∞–∑–∞–¥':
                Users.objects.filter(name=message.chat.id).update(status='1')
                bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=start_menu())
            elif message.text == '‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É':
                Users.objects.filter(name=message.chat.id).update(status='1')
                bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=start_menu())
            else:
                bot.delete_message(message.chat.id, message.message_id)

        @bot.callback_query_handler(func=lambda c: True)
        def inline(c):
            user = Users.objects.get(name=c.message.chat.id)
            if user.status == '1':
                if c.data.split('|')[0] == 'add':
                    tea_object = user.basket_set.get(id=c.data.split('|')[1])
                    tea_object.count += 1
                    tea_object.save()
                    bot.edit_message_text(f'{tea_object.name_product} ({tea_object.count} —à—Ç.)', c.message.chat.id,
                                          c.message.message_id, reply_markup=keyboard_count_tea(c.data.split('|')[1]))
                elif c.data.split('|')[0] == 'down':
                    try:
                        tea_object = user.basket_set.get(id=c.data.split('|')[1])
                        if tea_object.count == 0:
                            keyboard = types.InlineKeyboardMarkup()
                            but_1 = types.InlineKeyboardButton(text='‚ûï', callback_data=f"add|{c.data.split('|')[1]}")
                            but_2 = types.InlineKeyboardButton(text='‚ûñ', callback_data='empty')
                            but_3 = types.InlineKeyboardButton(text='‚úÖ', callback_data='ok')
                            keyboard.add(but_1, but_2)
                            keyboard.add(but_3)
                            bot.edit_message_text(f'{tea_object.name_product} ({tea_object.count} —à—Ç.)',
                                                  c.message.chat.id, c.message.message_id, reply_markup=keyboard)
                        else:
                            tea_object.count -= 1
                            tea_object.save(update_fields=['count'])
                            bot.edit_message_text(f'{tea_object.name_product} ({tea_object.count} —à—Ç.)',
                                                  c.message.chat.id, c.message.message_id,
                                                  reply_markup=keyboard_count_tea(c.data.split('|')[1]))
                    except exceptions.ObjectDoesNotExist:
                        bot.answer_callback_query(c.id, text="")

                elif c.data == 'ok':
                    user_basket(user, c.message.chat.id)
                    bot.delete_message(c.message.chat.id, c.message.message_id)
                elif c.data == 'empty':
                    bot.answer_callback_query(c.id, text="")
            elif c.data.split('|')[0] == 'd' or c.data.split('|')[0] == 'f':
                keyboard = types.InlineKeyboardMarkup()
                with open('photo_id.json', 'r') as f:
                    number_photo = json.load(f)
                if c.data.split('|')[1] == '1':
                    but_1 = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='d|23')
                    but_2 = types.InlineKeyboardButton('1/23', callback_data='empty')
                    but_3 = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='f|2')
                    keyboard.add(but_1, but_2, but_3)
                elif c.data.split('|')[1] == '23':
                    but_1 = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data='d|22')
                    but_2 = types.InlineKeyboardButton('23/23', callback_data='empty')
                    but_3 = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data='f|1')
                    keyboard.add(but_1, but_2, but_3)
                else:
                    but_1 = types.InlineKeyboardButton('‚óÄÔ∏è', callback_data=f'd|{int(c.data.split("|")[1]) - 1}')
                    but_2 = types.InlineKeyboardButton(f'{c.data.split("|")[1]}/23', callback_data='empty')
                    but_3 = types.InlineKeyboardButton('‚ñ∂Ô∏è', callback_data=f'f|{int(c.data.split("|")[1]) + 1}')
                    keyboard.add(but_1, but_2, but_3)
                bot.edit_message_media(types.InputMediaPhoto(number_photo[c.data.split("|")[1]]), c.message.chat.id,
                                       c.message.message_id, reply_markup=keyboard)
            else:
                bot.answer_callback_query(c.id, text="")
        bot.polling(none_stop=True)